# ==============================================================================
print ("Project Euler - Problem 12\n\n")
# ==============================================================================
# Description:
# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first 
# ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1, 3
#  6: 1, 2, 3, 6
# 10: 1, 2, 5, 10
# 15: 1, 3, 5, 15
# 21: 1, 3, 7, 21
# 28: 1, 2, 4, 7, 14, 28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred 
# divisors?
# ==============================================================================
import time
import math

start_time = time.time()
result = 0
# ***** BEGIN CODE FOR P12.py *****

def numDivisors(number):

    if (number == 1):
        return 1
    if (number < 1):
        return 0

    divisors = 1
    primes = 1
    i = 2

    # Inifinite loop to find interger divisors, starting at 2
    while True:
        if (number > 1):
            if ((number % i) == 0):
                number /= i     # Prime found, divide by it and iterate over new number
                primes += 1     # Add 1 to current prime count for this integer i
                continue        # Don't add 1 to integer i
            i += 1
            divisors *= primes
            primes = 1
        else:
            break
    divisors *= primes
    if (divisors == 1):
        return 2
    else:
        return divisors
    
# Main

tri_num = 0
i = 1

while True:
    tri_num += i
    if (numDivisors(tri_num) > 500):
        break
    i += 1

result = tri_num

# ***** END CODE FOR P12.py *****
print ("Result is: ", result)
print ("Run time: " + str((time.time() - start_time)) + " seconds")
# END P12.py
